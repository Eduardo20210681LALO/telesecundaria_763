name: CI/CD Test Workflow

on: [push, pull_request]

jobs:
  TEST_SELENIUM_MODULO_CALIFICACIONES_INTEGRACION:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' 

      - name: Install Selenium dependencies
        run: |
          npm install selenium-webdriver
          npm install chromedriver

      - name: Start local server
        run: npm run dev &
        env:
          CI: true

      - name: Wait for server to start
        run: sleep 15 

      - name: Run inline Selenium test for CapturaCalificacionesAlum
        run: |
          echo "Running first Selenium test on http://localhost:5173/CapturaCalificacionesAlum"
          node <<EOF
          const { Builder, By, until } = require('selenium-webdriver');
          const chrome = require('selenium-webdriver/chrome');

          (async function testCapturaCalificacionesAlum() {
            let options = new chrome.Options();
            options.addArguments('--headless', '--no-sandbox', '--disable-dev-shm-usage');

            let driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();

            try {
              await driver.get('http://localhost:5173/CapturaCalificacionesAlum');

              const inputField = await driver.findElement(By.css('#campoEntrada'));
              const submitButton = await driver.findElement(By.css('#botonEnviar'));
              await driver.wait(until.elementIsVisible(inputField), 3000);
              await driver.wait(until.elementIsVisible(submitButton), 3000);

              await inputField.sendKeys("Prueba de entrada");
              await submitButton.click();

              const result = await driver.wait(until.elementLocated(By.css('#resultado')), 5000);
              const resultText = await result.getText();
              if (resultText.includes("Resultado esperado")) {
                console.log("Prueba exitosa: Resultado esperado obtenido.");
              } else {
                console.error("Prueba fallida: Resultado inesperado.");
              }
            } catch (error) {
              console.error("Prueba fallida:", error);
            } finally {
              await driver.quit();
            }
          })();
          EOF

      - name: Comment on PR for Selenium Test 1
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "La primera prueba de Selenium en el módulo de calificaciones se completó."
            })

  TEST_EXTRE_MODULO_SELENIUM_ESTADISTICAS:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Selenium dependencies
        run: |
          npm install selenium-webdriver
          npm install chromedriver

      - name: Start local server
        run: npm run dev &
        env:
          CI: true

      - name: Wait for server to start
        run: sleep 15  # Ajusta el tiempo de espera si el servidor tarda más en arrancar

      - name: Run inline Selenium test for EstadisticasGrupalDocent
        run: |
          echo "Running second Selenium test on http://localhost:5173/EstadisticasGrupalDocent"
          node <<EOF
          const { Builder, By, until } = require('selenium-webdriver');
          const chrome = require('selenium-webdriver/chrome');

          (async function testEstadisticasGrupalDocent() {
            let options = new chrome.Options();
            options.addArguments('--headless', '--no-sandbox', '--disable-dev-shm-usage');

            let driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();

            try {
              await driver.get('http://localhost:5173/EstadisticasGrupalDocent');

              const periodoSelect = await driver.findElement(By.css('select[placeholder="Seleccionar Periodo"]'));
              await periodoSelect.click();
              await driver.findElement(By.xpath("//option[contains(text(), 'Periodo 1')]")).click();

              const gradoSelect = await driver.findElement(By.css('select[placeholder="Seleccionar Grado"]'));
              await gradoSelect.click();
              await driver.findElement(By.xpath("//option[contains(text(), 'Grado 1')]")).click();

              const grupoSelect = await driver.findElement(By.css('select[placeholder="Seleccionar Grupo"]'));
              await grupoSelect.click();
              await driver.findElement(By.xpath("//option[contains(text(), 'Grupo A')]")).click();

              const viewGradesButton = await driver.findElement(By.xpath("//button[contains(text(), 'Ver Calificaciones del Grupo')]"));
              await viewGradesButton.click();

              await driver.wait(until.elementLocated(By.css(".apexcharts-canvas")), 5000);
              console.log("Gráfico de barras cargado correctamente.");

              const bars = await driver.findElements(By.css(".apexcharts-bar-area"));
              if (bars.length > 0) {
                console.log("Prueba exitosa: Gráfico de estadísticas cargado con barras.");
              } else {
                console.error("Prueba fallida: No se encontraron barras en el gráfico.");
              }
            } catch (error) {
              console.error("Prueba fallida:", error);
            } finally {
              await driver.quit();
            }
          })();
          EOF

      - name: Comment on PR for Selenium Test 2
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "La segunda prueba de Selenium en el módulo de estadísticas se completó."
            })

  GENERATE_SWAGGER_LOGIN_DOCUMENTATION:
    needs: [TEST_SELENIUM_MODULO_CALIFICACIONES_INTEGRACION, TEST_EXTRE_MODULO_SELENIUM_ESTADISTICAS]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Swagger dependencies
        run: |
          npm install swagger-jsdoc swagger-ui-express

      - name: Generate Swagger Documentation for Login
        run: |
          node <<EOF
          const swaggerJSDoc = require('swagger-jsdoc');
          const fs = require('fs');

          const options = {
            definition: {
              openapi: '3.0.0',
              info: {
                title: 'Login API Documentation',
                version: '1.0.0',
              },
            },
            apis: ['./src/views/Login.jsx']  // Ruta actualizada para el archivo de Login
          };

          const swaggerSpec = swaggerJSDoc(options);
          fs.writeFileSync('./swagger.json', JSON.stringify(swaggerSpec, null, 2));
          console.log('Swagger documentation generated successfully for the Login module.');
          EOF

      - name: Upload Swagger Documentation Artifact
        uses: actions/upload-artifact@v3
        with:
          name: swagger-docs
          path: ./swagger.json

      - name: Comment on PR for Swagger Documentation
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "La documentación de Swagger para el módulo de Login se generó y está disponible como artefacto."
            })
